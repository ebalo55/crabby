use clap::Parser;

use crate::enums::obfuscation_method::ObfuscationMethod;
use crate::enums::template::Template;

mod enums;

#[derive(Parser, Debug)]
#[command(author, version, about = "Crabby, WebShells for Red Team.")]
struct Args {
	/// Output filename
	#[arg(short, long)]
	output: Option<String>,

	/// Which template language to use
	#[arg(short, long, value_enum)]
	template: Template,

	/// Define the language version to use for the template (if available)
	#[arg(long)]
	template_version: Option<String>,

	/// Clone templates and exit
	#[arg(long)]
	bare_clone: bool,

	/// Obfuscate the generated code
	#[arg(long)]
	obfuscate: bool,

	/// Obfuscation methods to apply to the code (comma separated)
	#[arg(long, value_enum)]
	obfuscation_method: Option<ObfuscationMethod>,

	/// Secret key used to authenticate to the webshell (autogenerated if not provided)
	#[arg(short, long)]
	secret: Option<String>,

	/// Generate also non-stealth code
	#[arg(long)]
	no_stealth: bool,
}

fn main() {
	let args = Args::parse();

	// Implement your logic here using the parsed arguments
	// For example:
	println!("Output filename: {:?}", args.output);
	println!("Template: {}", args.template);
	println!("Args: {:?}", args);

	// ... handle other arguments
}

use clap::{arg, Parser};

use folder_exists::folder_exists;

use crate::enums::obfuscation_method::ObfuscationMethod;
use crate::enums::template::Template;

mod enums;
mod actions;
pub mod folder_exists;
mod generate_random_string;

#[derive(Parser, Debug)]
#[command(author, version, about = "Crabby, WebShells for Red Team.")]
struct Args {
	/// Output filename
	#[arg(short, long)]
	output: Option<String>,

	/// Which template language to use
	#[arg(short, long, value_enum)]
	template: Template,

	/// Define the language version to use for the template (if available)
	#[arg(long)]
	template_version: Option<String>,

	/// Clone templates and exit
	#[arg(long)]
	bare_clone: bool,

	/// Obfuscate the generated code
	#[arg(long)]
	obfuscate: bool,

	/// Obfuscation methods to apply to the code (comma separated)
	#[arg(long, value_enum)]
	obfuscation_method: Option<ObfuscationMethod>,

	/// Password used to authenticate to the webshell (autogenerated if not provided)
	#[arg(short, long)]
	password: Option<String>,

	/// Length of the password used to authenticate to the webshell
	#[arg(long, default_value = "32")]
	password_length: u32,

	/// Username used to authenticate to the webshell (autogenerated if not provided)
	#[arg(short, long)]
	username: Option<String>,

	/// Length of the username used to authenticate to the webshell
	#[arg(long, default_value = "16")]
	username_length: u32,

	/// Salt used to authenticate to the webshell (autogenerated if not provided)
	#[arg(short, long)]
	salt: Option<String>,

	/// Length of the salt used to authenticate to the webshell
	#[arg(long, default_value = "64")]
	salt_length: u32,

	/// Generate also non-stealth code
	#[arg(long)]
	no_stealth: bool,
}

fn main() {
	let mut args = Args::parse();

	// If the user wants to clone the templates and exit, do so
	if args.bare_clone {
		actions::download_templates::download_templates();
		return;
	}

	// Check if the templates folder exists, and download them if it doesn't
	if !folder_exists("templates").unwrap() {
		actions::download_templates::download_templates();
	}

	// Set the default output filename if not provided
	if !args.output.is_some() {
		args.output = Some("output.php".to_string());
	}

	// Set the default username, password, and salt if not provided
	if !args.username.is_some() {
		args.username = Some(generate_random_string::generate_password(args.username_length).unwrap());
	}
	if !args.password.is_some() {
		args.password = Some(generate_random_string::generate_password(args.password_length).unwrap());
	}
	if !args.salt.is_some() {
		args.salt = Some(generate_random_string::generate_password(args.salt_length).unwrap());
	}

	println!("Defined username: {}", args.username.unwrap());
	println!("Defined password: {}", args.password.unwrap());
	println!("Random salt:      {}", args.salt.unwrap());
}
